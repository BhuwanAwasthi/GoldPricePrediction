# -*- coding: utf-8 -*-
"""Gold Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-o-IWgSd7_4SVqPvHcrqkV5aPfa2zlkp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

gold_data = pd.read_csv('/content/gld_price_data.csv')

gold_data.head(10)

#print last 5 rows of dataframe
gold_data.tail()

#number of rows and columns
gold_data.shape

#getting some basic information about the data
gold_data.info()

#checking the number of missing values
gold_data.isnull().sum()

#getting statiscal measures of the data
gold_data.describe()

#we will find correlation between these data
#two types of correlation positive and negative
#cbar=color baar, fmt=points decimals
correlation=gold_data.corr()
plt.figure(figsize=(8,8))
sns.heatmap(correlation,cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8},cmap='Blues')

#correlation values understanding
print(correlation['GLD'])

#check the distribution of the gold price
sns.distplot(gold_data['GLD'],color='green')

#so till now, we have learnt to visualise data, now let's start the work of machine learning as we have to now predict the price of gold

#splitting the features and target (gold price)
X=gold_data.drop(['Date','GLD'],axis=1) #axis=1 for columns and 0 for rows
Y=gold_data['GLD']
print(X)
print(Y)

#splitting into training data and test data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=2)
#model training usinf random forest regressor
regressor= RandomForestRegressor(n_estimators=100)
regressor.fit(X_train, Y_train)

#mode_evaluate
#prediction of test data

test_data_prediction=regressor.predict(X_test)

print(test_data_prediction)

#compare values with exact values

#R squared errors

error_score=metrics.r2_score(Y_test,test_data_prediction)
print('R Squared error : ',error_score)

#we can use deep learning models too

#we can use it by using graphs

Y_test=list(Y_test)
plt.plot(Y_test, color='blue', label="Actual Value")
plt.plot(test_data_prediction, color='green', label="Predicted Vlaue")
plt.title('Actaul Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('Gold price')
plt.legend()
plt.show()